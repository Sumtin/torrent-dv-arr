services:
  # Watchtower - Auto update all containers
  watchtower:
    container_name: watchtower
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    environment:
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - 'WATCHTOWER_NOTIFICATION_URL=discord://${DISCORD_NOTIFICATION_SERVER_KEY}'  # ** SECRET **
      - 'WATCHTOWER_NOTIFICATION_TEMPLATE={{range .}}{{.Time.Format \2006-01-02'
    image: containrrr/watchtower
    restart: unless-stopped

  # VPN - Gluetun
  vpn:
    container_name: vpn
    image: qmcgaw/gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      - VPN_PORT_FORWARDING=on
      - VPN_SERVICE_PROVIDER=${VPN_PROVIDER}
      - VPN_TYPE=${VPN_TYPE}
      - WIREGUARD_PRIVATE_KEY=${VPN_ACTIVATION_CODE}
      - SERVER_COUNTRIES=${VPN_COUNTRY}
    restart: unless-stopped
    # List ports for all containers that will route through this container
    ports:
      - 5555:5555      # qBittorrent WEBUI_PORT value
      - 6881:6881      # qBittorrent default
      - 6881:6881/udp  # qBittorrent default
      - 8080:8080      # Gatus default
      - 3000:3000      # OpenSpeedTest

  # qBittorrent (routes through ExpressVPN)
  bittorrent:
    container_name: qbittorrent
    image: lscr.io/linuxserver/qbittorrent:latest
    network_mode: container:vpn
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - WEBUI_PORT=5555
    volumes:
      - ${MOUNT_TO_REMOTE_VOLUME_STORE}/${HOST_NAME}:/config
      - ${MOUNT_TO_BTDOWNLOADS}:/downloads # Update if mount is in different location
    restart: unless-stopped    
    depends_on:
      - vpn

  # Gatus (routes through VPN container)
  gatus:
    container_name: gatus
    image: twinproduction/gatus
    network_mode: container:vpn
    restart: always
    volumes:
      - ${MOUNT_TO_REMOTE_VOLUME_STORE}/${HOST_NAME}/gatus:/config
    depends_on:
      - vpn

  # Sonarr (TV)
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - Sonarr:/config
      - ${MOUNT_TO_TV}:/tv # Update if mount is in different location
      - ${MOUNT_TO_BTDOWNLOADS}:/downloads # Update if mount is in different location
    ports:
      - 8989:8989
    restart: unless-stopped

  # Radarr (Movies)
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - Radarr:/config
      - ${MOUNT_TO_MOVIES}:/movies # Update if mount is in different location
      - ${MOUNT_TO_BTDOWNLOADS}:/downloads # Update if mount is in different location
    ports:
      - 7878:7878
    restart: unless-stopped
  
  # Bazarr (Subtitles for Movie and TV)
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ${MOUNT_TO_REMOTE_VOLUME_STORE}/${HOST_NAME}/bazarr:/config
      - ${MOUNT_TO_MOVIES}:/movies # Update if mount is in different location
      - ${MOUNT_TO_TV}:/tv # Update if mount is in different location
    ports:
      - 6767:6767
    restart: unless-stopped
  
  # Jackett (allows usenet bots like Sonarr and Radarr to use torrent sites) - Need to investigate Prowlarr
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - AUTO_UPDATE=true #optional
      - RUN_OPTS= #optional
    volumes:
      - ${MOUNT_TO_REMOTE_VOLUME_STORE}/${HOST_NAME}/jackett:/config
      - ${MOUNT_TO_BTDOWNLOADS}:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped

  # Flaresolverr (only needed if torrent site behind CloudFlare proxy)
  flaresolverr:
    container_name: flaresolverr
    image: 21hsmw/flaresolverr:nodriver
    ports:
        - 8191:8191
    environment:
        - DRIVER=nodriver
        - TZ=${TIMEZONE}
    restart: unless-stopped

  # OpenSpeedTest no VPN
  speedtest:
      restart: no
      container_name: openspeedtest
      ports:
          - '3030:3000'
      image: openspeedtest/latest

  # OpenSpeedTest behind VPN
  speedtest-vpn:
      restart: no
      container_name: openspeedtest-vpn
      image: openspeedtest/latest
      network_mode: container:vpn
      depends_on:
        - vpn   

  # Popular Auto-Downloader (IRC/RSS monitor)
  # autobrr:
  #   container_name: autobrr
  #   image: ghcr.io/autobrr/autobrr:latest
  #   restart: unless-stopped
  #   logging:
  #    driver: json-file
  #    options:
  #      max-file: 5
  #      max-size: 5
  #   user: 1000:1000
  #   environment:
  #     - TZ=${TIMEZONE}
  #     #- AUTOBRR__LOG_PATH=${MOUNT_TO_REMOTE_VOLUME_STORE}/${HOST_NAME}/autobrr/logs
  #     #- AUTOBRR__LOG_MAX_SIZE=10 #MB
  #     #- AUTOBRR__LOG_MAX_BACKUPS=5
  #   volumes:
  #     - ${MOUNT_TO_REMOTE_VOLUME_STORE}/${HOST_NAME}/autobrr/config:/config
  #   ports:
  #     - 7474:7474

  # # Traefik reverse proxy
  # reverse-proxy:
  #   image: traefik:v2.10
  #   # Enables the web UI and tells Traefik to listen to docker
  #   command: --api.insecure=true --providers.docker
  #   ports:
  #     # The HTTP port
  #     - "80:80"
  #     # The Web UI (enabled by --api.insecure=true)
  #     - "8080:8888"
  #   volumes:
  #     # So that Traefik can listen to the Docker events
  #     - /var/run/docker.sock:/var/run/docker.sock

  # # Traefix helper - A container that exposes an API to show its IP address
  # whoami:
  #   image: traefik/whoami
  #   labels:
  #     - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"

# Create local volume mounts
volumes:
  Radarr:
  Sonarr:
